// native Point_ptr;

valuetype Point {
    public long x, y;
    string toString();
};

valuetype NamedPoint: Point {
    public string name;
};

interface GIOPSmall {
    void call(in string value);
};

// OmniORB needs typedefs for sequences
typedef sequence<string> StringSeq;
typedef sequence<long> LongSeq;

enum CallbackType {
    CB_BOOL, CB_CHAR, CB_OCTET, CB_SHORT, CB_USHORT, CB_LONG, CB_ULONG,
    CB_LONGLONG, CB_ULONGLONG, CB_FLOAT, CB_DOUBLE, CB_STRING, CB_SEQUENCE,
    CB_VALUE, CB_SUBCLASSED_VALUE, CB_VALUE_WITH_NULL, CB_VALUES_DUPLICATE_REPOSITORY_ID, CB_VALUES_DUPLICATE_OBJECT,
    CB_SEND_OBJECT, CB_GET_OBJECT
};

valuetype Origin {
    public double x, y;
};

valuetype Size {
    public double width, height;
};

valuetype Figure {
    public unsigned long id;
};

valuetype Rectangle: Figure {
    public Origin origin;
    public Size size;
};

typedef sequence<Figure> FigureSeq;
valuetype FigureModel {
    public FigureSeq data;
};

/*
struct RGBA {
    octet r, g, b, a;
};
enum AttributeType {
    STROKE_RGBA,
    FILL_RGBA,
    STROKE_WIDTH
};
union Attribute switch(AttributeType) {
    case STROKE_RGBA: RGBA strokeRGBA;
    case FILL_RGBA: RGBA fillRGBA;
    case STROKE_WIDTH: double strokeWidth;
};
typedef sequence<Attribute> AttributeSeq;
*/

interface GIOPTest {

    string peek();
    void call(in GIOPTest callback, in CallbackType method);

    oneway void onewayMethod();
    void sendBool(in boolean v0, in boolean v1);
    void sendChar(in char v0, in char v1);
    void sendOctet(in octet v0, in octet v1);
    void sendShort(in short v0, in short v1);
    void sendUShort(in unsigned short v0, in unsigned short v1);
    void sendLong(in long v0, in long v1);
    void sendULong(in unsigned long v0, in unsigned long v1);
    void sendLongLong(in long long v0, in long long v1);
    void sendULongLong(in unsigned long long v0, in unsigned long long v1);

    void sendFloat(in float v0, in float v1);
    void sendDouble(in double v0, in double v1);

    void sendString(in string v0, in string v1);
    // the following line is accepted by MICO, but rejected by OmniORB
    //   void sendSequence(in sequence<string> v0, in sequence<long> v1);
    // hence we're doing it like this:
    void sendSequence(in StringSeq v0, in LongSeq v1);

    void sendValuePoint(in Point v0);
    void sendValuePoints(in Point v0, in Point v1);

    void sendObject(in GIOPSmall obj, in string msg);
    GIOPSmall getObject();
    GIOPSmall reflectObject(in GIOPSmall obj);
    // GIOPSmall rcvdObject();

    // void sendAny(in any v0);

    void setFigureModel(in FigureModel model);
};
